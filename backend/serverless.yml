# FocusFlow Serverless Configuration

org: devquesting
app: focusflow
service: backend

plugins:
  - serverless-offline


provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: dev
  environment:
    AUTH0_DOMAIN: your-auth0-domain.auth0.com
    AUTH0_AUDIENCE: focusflow-audience
    AUTH0_ISSUER: https://dev-6zeb418i7xs8g1lc.us.auth0.com/
    DYNAMODB_TASKS_TABLE: ${self:custom.tableName}
    DYNAMODB_USERS_TABLE: ${self:custom.usersTableName}
    S3_ASSETS_BUCKET: ${self:custom.bucketName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt TasksTable.Arn
            - !GetAtt UsersTable.Arn
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: !Join ["/", [!GetAtt AssetsBucket.Arn, "*"]]
        - Effect: Allow
          Action:
            - cognito-idp:SignUp
          Resource: '*'

custom:
  tableName: ${sls:stage}-focusflow-tasks
  usersTableName: ${sls:stage}-focusflow-users
  bucketName: ${sls:stage}-focusflow-assets

resources:
  Resources:
    # DynamoDB Table for Tasks
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: taskId
            KeyType: RANGE

    # DynamoDB Table for Users
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH

    # S3 Bucket for Assets
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ["*"]
              MaxAge: 3000

functions:
  # Task Management
  createTask:
    handler: src/handlers/task/createTask.createTask
    events:
      - http:
          path: tasks
          method: post
          cors: true
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 300
            name: auth0Authorizer
  getTasks:
    handler: src/handlers/task/getTasks.getTasks
    events:
      - http:
          path: tasks
          method: get
          cors: true
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 300
            name: auth0Authorizer
  updateTask:
    handler: src/handlers/task/updateTask.updateTask
    events:
      - http:
          path: tasks/{taskId}
          method: put
          cors: true
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 300
            name: auth0Authorizer
  deleteTask:
    handler: src/handlers/task/deleteTask.deleteTask
    events:
      - http:
          path: tasks/{taskId}
          method: delete
          cors: true
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 300
            name: auth0Authorizer

  # Pomodoro Timer
  manageTimer:
    handler: src/handlers/timer/manageTimer.manageTimer
    events:
      - http:
          path: timer
          method: post
          cors: true
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 300
            name: auth0Authorizer

  # User Preferences
  updatePreferences:
    handler: src/handlers/preferences/updatePreferences.updatePreferences
    events:
      - http:
          path: preferences
          method: put
          cors: true
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 300
            name: auth0Authorizer

  # Music Player
  getMusic:
    handler: src/handlers/music/getMusic.getMusic
    events:
      - http:
          path: music
          method: get
          cors: true

  # Background Management
  updateBackground:
    handler: src/handlers/background/updateBackground.updateBackground
    events:
      - http:
          path: backgrounds
          method: put
          cors: true
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            authorizerResultTtlInSeconds: 300
            name: auth0Authorizer

  auth0Authorizer:
    handler: src/handlers/auth/auth.auth0Authorizer
