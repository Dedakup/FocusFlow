# FocusFlow Serverless Configuration

org: for-project
app: focus-flow
service: backend

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: dev
  environment:
    AUTH0_DOMAIN: dev-6zeb418i7xs8g1lc.us.auth0.com
    AUTH0_AUDIENCE: focus-flow-audience
    AUTH0_ISSUER: https://dev-6zeb418i7xs8g1lc.us.auth0.com/
    DYNAMODB_TASKS_TABLE: dev-focus-flow-tasks
    DYNAMODB_USERS_TABLE: dev-focus-flow-users
    S3_ASSETS_BUCKET: dev-focus-flow-assets
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: "*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-auth0Authenticator

custom:
  tableName: ${sls:stage}-focus-flow-tasks
  usersTableName: ${sls:stage}-focus-flow-users
  bucketName: ${sls:stage}-focus-flow-assets-${aws:accountId}
  serverless-offline:
    httpPort: 4000

resources:
  Resources:
    # DynamoDB Table for Tasks
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: taskId
            KeyType: RANGE

    # DynamoDB Table for Users
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH

    UserBackgroundsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dev-user-backgrounds
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH

    # S3 Bucket for Assets
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ["*"]
              MaxAge: 3000

functions:
  # Swagger UI
  apiDocs:
    handler: src/utils/swagger.handler
    events:
      - http:
          path: api-docs
          method: get
  # Task Management
  createTask:
    handler: src/handlers/task/createTask.createTask
    events:
      - http:
          path: tasks
          method: post
          cors:
            origin: "http://localhost:5173"
            allowCredentials: true
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer

  getTask:
    handler: src/handlers/task/getTask.getTasks
    events:
      - http:
          path: tasks
          method: get
          cors: true
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer

  updateTask:
    handler: src/handlers/task/updateTask.updateTask
    events:
      - http:
          path: tasks/{taskId}
          method: put
          cors:
            origin: "http://localhost:5173" # Use '*' for all origins or specify 'http://localhost:5173' for development
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer
          allowCredentials: true

  deleteTask:
    handler: src/handlers/task/deleteTask.deleteTask
    events:
      - http:
          path: tasks/{taskId}
          method: delete
          cors:
            origin: "http://localhost:5173" # Use '*' for all origins or specify 'http://localhost:5173' for development
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer
          allowCredentials: true

  # Timer
  manageTimer:
    handler: src/handlers/timer/manageTimer.manageTimer
    events:
      - http:
          path: timer
          method: post
          cors:
            origin: "*" # Use '*' for all origins or specify 'http://localhost:5173' for development
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer

  # User Preferences
  updatePreferences:
    handler: src/handlers/preferences/updatePreferences.updatePreferences
    events:
      - http:
          path: preferences
          method: put
          cors:
            origin: "*" # Use '*' for all origins or specify 'http://localhost:5173' for development
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer

  # Music Player
  getMusic:
    handler: src/handlers/music/getMusic.getMusic
    events:
      - http:
          path: music
          method: get
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer

  # Sounds
  getSounds:
    handler: src/handlers/sounds/getSounds.getSounds
    events:
      - http:
          path: sounds
          method: get
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer

  #backgrounds
  getBackgrounds:
    handler: src/handlers/backgrounds/getBackgrounds.getBackgrounds
    events:
      - http:
          path: backgrounds/{userId}
          method: get
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer

  addBackground:
    handler: src/handlers/backgrounds/addBackground.addBackground
    events:
      - http:
          path: backgrounds/{userId}
          method: post
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer

  deleteBackground:
    handler: src/handlers/backgrounds/deleteBackground.deleteBackground
    events:
      - http:
          path: backgrounds/{userId}
          method: delete
          authorizer:
            type: REQUEST
            identitySource: method.request.header.Authorization
            name: auth0Authorizer

  #custom auth
  auth0Authorizer:
    handler: src/handlers/auth/index.handler
    events:
      - http:
          path: auth/validate
          method: post
          cors: true
