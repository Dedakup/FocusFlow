{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "CreateTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-createTask"
      }
    },
    "GetTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-getTask"
      }
    },
    "UpdateTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-updateTask"
      }
    },
    "DeleteTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-deleteTask"
      }
    },
    "ManageTimerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-manageTimer"
      }
    },
    "UpdatePreferencesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-updatePreferences"
      }
    },
    "GetMusicLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-getMusic"
      }
    },
    "UpdateBackgroundLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-updateBackground"
      }
    },
    "InitializeBackgroundsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-initializeBackgrounds"
      }
    },
    "GetBackgroundsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-getBackgrounds"
      }
    },
    "AddBackgroundLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-addBackground"
      }
    },
    "DeleteBackgroundLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-deleteBackground"
      }
    },
    "Auth0AuthorizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-dev-auth0Authorizer"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:Scan",
                    "dynamodb:Query"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-auth0Authenticator"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CreateTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/task/createTask.createTask",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-createTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateTaskLogGroup"
      ]
    },
    "GetTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/task/getTask.getTasks",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-getTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTaskLogGroup"
      ]
    },
    "UpdateTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/task/updateTask.updateTask",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-updateTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateTaskLogGroup"
      ]
    },
    "DeleteTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/task/deleteTask.deleteTask",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-deleteTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteTaskLogGroup"
      ]
    },
    "ManageTimerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/timer/manageTimer.manageTimer",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-manageTimer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ManageTimerLogGroup"
      ]
    },
    "UpdatePreferencesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/preferences/updatePreferences.updatePreferences",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-updatePreferences",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdatePreferencesLogGroup"
      ]
    },
    "GetMusicLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/music/getMusic.getMusic",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-getMusic",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetMusicLogGroup"
      ]
    },
    "UpdateBackgroundLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/background/updateBackground.updateBackground",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-updateBackground",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateBackgroundLogGroup"
      ]
    },
    "InitializeBackgroundsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/backgrounds.initializeBackgrounds",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-initializeBackgrounds",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "InitializeBackgroundsLogGroup"
      ]
    },
    "GetBackgroundsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/backgrounds.getBackgrounds",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-getBackgrounds",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetBackgroundsLogGroup"
      ]
    },
    "AddBackgroundLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/backgrounds.addBackground",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-addBackground",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddBackgroundLogGroup"
      ]
    },
    "DeleteBackgroundLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/backgrounds.deleteBackground",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-deleteBackground",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteBackgroundLogGroup"
      ]
    },
    "Auth0AuthorizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
          "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
        },
        "Handler": "src/handlers/auth/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "backend-dev-auth0Authorizer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
            "AUTH0_AUDIENCE": "focusflow-audience",
            "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
            "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
            "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
            "S3_ASSETS_BUCKET": "dev-focusflow-assets"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "Auth0AuthorizerLogGroup"
      ]
    },
    "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateTaskLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTaskLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTaskLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteTaskLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ManageTimerLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdatePreferencesLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMusicLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateBackgroundLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InitializeBackgroundsLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetBackgroundsLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddBackgroundLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteBackgroundLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "Auth0AuthorizerLambdaFunction"
        },
        "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-backend",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceTasks": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "tasks",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTasksTaskidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTasks"
        },
        "PathPart": "{taskId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTimer": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "timer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePreferences": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "preferences",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMusic": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "music",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBackgrounds": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "backgrounds",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBackgroundsUseridVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceBackgrounds"
        },
        "PathPart": "{userId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBackgroundsUseridVarInitialize": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceBackgroundsUseridVar"
        },
        "PathPart": "initialize",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthValidate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "validate",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTasksOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id,X-Requested-With'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'true'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTasks"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTasksTaskidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTasksTaskidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTimerOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTimer"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPreferencesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePreferences"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMusicOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMusic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodBackgroundsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceBackgrounds"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthValidateOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthValidate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTasksPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTasks"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "Auth0AuthorizerApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodTasksGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTasks"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "Auth0AuthorizerApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodTasksTaskidVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTasksTaskidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "Auth0AuthorizerApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodTasksTaskidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTasksTaskidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "Auth0AuthorizerApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodTimerPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTimer"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ManageTimerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "Auth0AuthorizerApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodPreferencesPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePreferences"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdatePreferencesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "Auth0AuthorizerApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodMusicGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMusic"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetMusicLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetMusicLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodBackgroundsPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBackgrounds"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateBackgroundLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "Auth0AuthorizerApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodBackgroundsUseridVarInitializePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBackgroundsUseridVarInitialize"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InitializeBackgroundsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "InitializeBackgroundsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodBackgroundsUseridVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBackgroundsUseridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetBackgroundsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetBackgroundsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodBackgroundsUseridVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBackgroundsUseridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddBackgroundLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AddBackgroundLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodBackgroundsUseridVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBackgroundsUseridVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteBackgroundLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteBackgroundLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthValidatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthValidate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "Auth0AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "Auth0AuthorizerLambdaPermissionApiGateway"
      ]
    },
    "Auth0AuthorizerApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "auth0Authorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "Auth0AuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "REQUEST"
      }
    },
    "ApiGatewayDeployment1732598895104": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodTasksOptions",
        "ApiGatewayMethodTasksTaskidVarOptions",
        "ApiGatewayMethodTimerOptions",
        "ApiGatewayMethodPreferencesOptions",
        "ApiGatewayMethodMusicOptions",
        "ApiGatewayMethodBackgroundsOptions",
        "ApiGatewayMethodAuthValidateOptions",
        "ApiGatewayMethodTasksPost",
        "ApiGatewayMethodTasksGet",
        "ApiGatewayMethodTasksTaskidVarPut",
        "ApiGatewayMethodTasksTaskidVarDelete",
        "ApiGatewayMethodTimerPost",
        "ApiGatewayMethodPreferencesPut",
        "ApiGatewayMethodMusicGet",
        "ApiGatewayMethodBackgroundsPut",
        "ApiGatewayMethodBackgroundsUseridVarInitializePost",
        "ApiGatewayMethodBackgroundsUseridVarGet",
        "ApiGatewayMethodBackgroundsUseridVarPost",
        "ApiGatewayMethodBackgroundsUseridVarDelete",
        "ApiGatewayMethodAuthValidatePost"
      ]
    },
    "CreateTaskLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "Auth0AuthorizerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "Auth0AuthorizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTaskLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateTaskLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteTaskLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ManageTimerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ManageTimerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdatePreferencesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdatePreferencesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetMusicLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMusicLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateBackgroundLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateBackgroundLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "InitializeBackgroundsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "InitializeBackgroundsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetBackgroundsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetBackgroundsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddBackgroundLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddBackgroundLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteBackgroundLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteBackgroundLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TasksTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "dev-focusflow-tasks",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "taskId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "taskId",
            "KeyType": "RANGE"
          }
        ]
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "dev-focusflow-users",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "UserBackgroundsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "dev-user-backgrounds",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "AssetsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "dev-focusflow-assets-274552760074",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "DELETE",
                "HEAD"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "MaxAge": 3000
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
      "Export": {
        "Name": "sls-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "CreateTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM"
      },
      "Export": {
        "Name": "sls-backend-dev-CreateTaskLambdaFunctionQualifiedArn"
      }
    },
    "GetTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M"
      },
      "Export": {
        "Name": "sls-backend-dev-GetTaskLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE"
      },
      "Export": {
        "Name": "sls-backend-dev-UpdateTaskLambdaFunctionQualifiedArn"
      }
    },
    "DeleteTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg"
      },
      "Export": {
        "Name": "sls-backend-dev-DeleteTaskLambdaFunctionQualifiedArn"
      }
    },
    "ManageTimerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw"
      },
      "Export": {
        "Name": "sls-backend-dev-ManageTimerLambdaFunctionQualifiedArn"
      }
    },
    "UpdatePreferencesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ"
      },
      "Export": {
        "Name": "sls-backend-dev-UpdatePreferencesLambdaFunctionQualifiedArn"
      }
    },
    "GetMusicLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU"
      },
      "Export": {
        "Name": "sls-backend-dev-GetMusicLambdaFunctionQualifiedArn"
      }
    },
    "UpdateBackgroundLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs"
      },
      "Export": {
        "Name": "sls-backend-dev-UpdateBackgroundLambdaFunctionQualifiedArn"
      }
    },
    "InitializeBackgroundsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw"
      },
      "Export": {
        "Name": "sls-backend-dev-InitializeBackgroundsLambdaFunctionQualifiedArn"
      }
    },
    "GetBackgroundsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg"
      },
      "Export": {
        "Name": "sls-backend-dev-GetBackgroundsLambdaFunctionQualifiedArn"
      }
    },
    "AddBackgroundLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw"
      },
      "Export": {
        "Name": "sls-backend-dev-AddBackgroundLambdaFunctionQualifiedArn"
      }
    },
    "DeleteBackgroundLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc"
      },
      "Export": {
        "Name": "sls-backend-dev-DeleteBackgroundLambdaFunctionQualifiedArn"
      }
    },
    "Auth0AuthorizerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg"
      },
      "Export": {
        "Name": "sls-backend-dev-Auth0AuthorizerLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-backend-dev-ServiceEndpoint"
      }
    }
  }
}