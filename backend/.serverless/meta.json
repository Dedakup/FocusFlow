{
  "D:\\Projects\\Portfolio_Projects\\focusflow\\FocusFlow\\backend": {
    "versionSfCore": null,
    "versionFramework": "4.4.12",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "self": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "devquesting",
            "app": "focusflow",
            "service": "backend",
            "plugins": [
              "serverless-offline"
            ],
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "region": "us-east-1",
              "stage": "dev",
              "environment": {
                "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                "AUTH0_AUDIENCE": "focusflow-audience",
                "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                "S3_ASSETS_BUCKET": "dev-focusflow-assets"
              },
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem",
                        "dynamodb:Scan",
                        "dynamodb:Query"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:DeleteObject"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "lambda:InvokeFunction"
                      ],
                      "Resource": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-auth0Authenticator"
                    }
                  ]
                }
              },
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "CreateTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-createTask"
                    }
                  },
                  "GetTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-getTask"
                    }
                  },
                  "UpdateTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-updateTask"
                    }
                  },
                  "DeleteTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-deleteTask"
                    }
                  },
                  "ManageTimerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-manageTimer"
                    }
                  },
                  "UpdatePreferencesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-updatePreferences"
                    }
                  },
                  "GetMusicLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-getMusic"
                    }
                  },
                  "UpdateBackgroundLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-updateBackground"
                    }
                  },
                  "InitializeBackgroundsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-initializeBackgrounds"
                    }
                  },
                  "GetBackgroundsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-getBackgrounds"
                    }
                  },
                  "AddBackgroundLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-addBackground"
                    }
                  },
                  "DeleteBackgroundLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-deleteBackground"
                    }
                  },
                  "Auth0AuthorizerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-auth0Authorizer"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "backend",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:UpdateItem",
                                  "dynamodb:DeleteItem",
                                  "dynamodb:Scan",
                                  "dynamodb:Query"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:PutObject",
                                  "s3:GetObject",
                                  "s3:DeleteObject"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "lambda:InvokeFunction"
                                ],
                                "Resource": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-auth0Authenticator"
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "backend",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/createTask.createTask",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-createTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateTaskLogGroup"
                    ]
                  },
                  "GetTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/getTask.getTasks",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-getTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetTaskLogGroup"
                    ]
                  },
                  "UpdateTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/updateTask.updateTask",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-updateTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateTaskLogGroup"
                    ]
                  },
                  "DeleteTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/deleteTask.deleteTask",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-deleteTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteTaskLogGroup"
                    ]
                  },
                  "ManageTimerLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/timer/manageTimer.manageTimer",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-manageTimer",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ManageTimerLogGroup"
                    ]
                  },
                  "UpdatePreferencesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/preferences/updatePreferences.updatePreferences",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-updatePreferences",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdatePreferencesLogGroup"
                    ]
                  },
                  "GetMusicLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/music/getMusic.getMusic",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-getMusic",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetMusicLogGroup"
                    ]
                  },
                  "UpdateBackgroundLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/background/updateBackground.updateBackground",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-updateBackground",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateBackgroundLogGroup"
                    ]
                  },
                  "InitializeBackgroundsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.initializeBackgrounds",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-initializeBackgrounds",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "InitializeBackgroundsLogGroup"
                    ]
                  },
                  "GetBackgroundsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.getBackgrounds",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-getBackgrounds",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetBackgroundsLogGroup"
                    ]
                  },
                  "AddBackgroundLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.addBackground",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-addBackground",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddBackgroundLogGroup"
                    ]
                  },
                  "DeleteBackgroundLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.deleteBackground",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-deleteBackground",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteBackgroundLogGroup"
                    ]
                  },
                  "Auth0AuthorizerLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/auth/index.handler",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-auth0Authorizer",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "Auth0AuthorizerLogGroup"
                    ]
                  },
                  "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ManageTimerLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdatePreferencesLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetMusicLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateBackgroundLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "InitializeBackgroundsLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetBackgroundsLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddBackgroundLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteBackgroundLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "Auth0AuthorizerLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceTasks": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "tasks",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceTasksTaskidVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "PathPart": "{taskId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceTimer": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "timer",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePreferences": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "preferences",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMusic": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "music",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBackgrounds": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "backgrounds",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBackgroundsUseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceBackgrounds"
                      },
                      "PathPart": "{userId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBackgroundsUseridVarInitialize": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "PathPart": "initialize",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuth": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "auth",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuthValidate": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceAuth"
                      },
                      "PathPart": "validate",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTasksOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true,
                            "method.response.header.Access-Control-Allow-Credentials": "<REDACTED>"
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id,X-Requested-With'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'",
                              "method.response.header.Access-Control-Allow-Credentials": "<REDACTED>"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTasksTaskidVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasksTaskidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTimerOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTimer"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPreferencesOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePreferences"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMusicOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMusic"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodBackgroundsOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgrounds"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodAuthValidateOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthValidate"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTasksPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTasksGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTasksTaskidVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasksTaskidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTasksTaskidVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasksTaskidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTimerPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTimer"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ManageTimerLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodPreferencesPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePreferences"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdatePreferencesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodMusicGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMusic"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetMusicLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetMusicLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgrounds"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateBackgroundLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarInitializePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVarInitialize"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "InitializeBackgroundsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "InitializeBackgroundsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetBackgroundsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetBackgroundsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddBackgroundLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AddBackgroundLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteBackgroundLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteBackgroundLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodAuthValidatePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthValidate"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "Auth0AuthorizerLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerLambdaPermissionApiGateway"
                    ]
                  },
                  "Auth0AuthorizerApiGatewayAuthorizer": {
                    "Type": "AWS::ApiGateway::Authorizer",
                    "Properties": {
                      "AuthorizerResultTtlInSeconds": 300,
                      "IdentitySource": "method.request.header.Authorization",
                      "Name": "auth0Authorizer",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "AuthorizerUri": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                              "Fn::GetAtt": [
                                "Auth0AuthorizerLambdaFunction",
                                "Arn"
                              ]
                            },
                            "/invocations"
                          ]
                        ]
                      },
                      "Type": "REQUEST"
                    }
                  },
                  "ApiGatewayDeployment1732598895104": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodTasksOptions",
                      "ApiGatewayMethodTasksTaskidVarOptions",
                      "ApiGatewayMethodTimerOptions",
                      "ApiGatewayMethodPreferencesOptions",
                      "ApiGatewayMethodMusicOptions",
                      "ApiGatewayMethodBackgroundsOptions",
                      "ApiGatewayMethodAuthValidateOptions",
                      "ApiGatewayMethodTasksPost",
                      "ApiGatewayMethodTasksGet",
                      "ApiGatewayMethodTasksTaskidVarPut",
                      "ApiGatewayMethodTasksTaskidVarDelete",
                      "ApiGatewayMethodTimerPost",
                      "ApiGatewayMethodPreferencesPut",
                      "ApiGatewayMethodMusicGet",
                      "ApiGatewayMethodBackgroundsPut",
                      "ApiGatewayMethodBackgroundsUseridVarInitializePost",
                      "ApiGatewayMethodBackgroundsUseridVarGet",
                      "ApiGatewayMethodBackgroundsUseridVarPost",
                      "ApiGatewayMethodBackgroundsUseridVarDelete",
                      "ApiGatewayMethodAuthValidatePost"
                    ]
                  },
                  "CreateTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "Auth0AuthorizerLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "Auth0AuthorizerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ManageTimerLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ManageTimerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdatePreferencesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdatePreferencesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetMusicLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetMusicLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateBackgroundLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "InitializeBackgroundsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "InitializeBackgroundsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetBackgroundsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetBackgroundsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "AddBackgroundLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteBackgroundLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "TasksTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "dev-focusflow-tasks",
                      "BillingMode": "PAY_PER_REQUEST",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "taskId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        },
                        {
                          "AttributeName": "taskId",
                          "KeyType": "RANGE"
                        }
                      ]
                    }
                  },
                  "UsersTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "dev-focusflow-users",
                      "BillingMode": "PAY_PER_REQUEST",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        }
                      ]
                    }
                  },
                  "UserBackgroundsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "dev-user-backgrounds",
                      "BillingMode": "PAY_PER_REQUEST",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        }
                      ]
                    }
                  },
                  "AssetsBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketName": "dev-focusflow-assets-274552760074",
                      "CorsConfiguration": {
                        "CorsRules": [
                          {
                            "AllowedHeaders": [
                              "*"
                            ],
                            "AllowedMethods": [
                              "GET",
                              "PUT",
                              "POST",
                              "DELETE",
                              "HEAD"
                            ],
                            "AllowedOrigins": [
                              "*"
                            ],
                            "MaxAge": 3000
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                    "Export": {
                      "Name": "sls-backend-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "CreateTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-CreateTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-GetTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-UpdateTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-DeleteTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "ManageTimerLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-ManageTimerLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdatePreferencesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-UpdatePreferencesLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetMusicLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-GetMusicLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateBackgroundLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-UpdateBackgroundLambdaFunctionQualifiedArn"
                    }
                  },
                  "InitializeBackgroundsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-InitializeBackgroundsLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetBackgroundsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-GetBackgroundsLambdaFunctionQualifiedArn"
                    }
                  },
                  "AddBackgroundLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-AddBackgroundLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteBackgroundLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-DeleteBackgroundLambdaFunctionQualifiedArn"
                    }
                  },
                  "Auth0AuthorizerLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-Auth0AuthorizerLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-backend-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "custom": {
              "tableName": "dev-focusflow-tasks",
              "usersTableName": "dev-focusflow-users",
              "bucketName": "dev-focusflow-assets-274552760074"
            },
            "resources": {
              "Resources": {
                "TasksTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "dev-focusflow-tasks",
                    "BillingMode": "PAY_PER_REQUEST",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "taskId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "taskId",
                        "KeyType": "RANGE"
                      }
                    ]
                  }
                },
                "UsersTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "dev-focusflow-users",
                    "BillingMode": "PAY_PER_REQUEST",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ]
                  }
                },
                "UserBackgroundsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "dev-user-backgrounds",
                    "BillingMode": "PAY_PER_REQUEST",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ]
                  }
                },
                "AssetsBucket": {
                  "Type": "AWS::S3::Bucket",
                  "Properties": {
                    "BucketName": "dev-focusflow-assets-274552760074",
                    "CorsConfiguration": {
                      "CorsRules": [
                        {
                          "AllowedHeaders": [
                            "*"
                          ],
                          "AllowedMethods": [
                            "GET",
                            "PUT",
                            "POST",
                            "DELETE",
                            "HEAD"
                          ],
                          "AllowedOrigins": [
                            "*"
                          ],
                          "MaxAge": 3000
                        }
                      ]
                    }
                  }
                }
              },
              "Outputs": {}
            },
            "functions": {
              "createTask": {
                "handler": "src/handlers/task/createTask.createTask",
                "events": [
                  {
                    "http": {
                      "path": "tasks",
                      "method": "post",
                      "cors": {
                        "origin": "http://localhost:5173",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-createTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM"
              },
              "getTask": {
                "handler": "src/handlers/task/getTask.getTasks",
                "events": [
                  {
                    "http": {
                      "path": "tasks",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-getTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M"
              },
              "updateTask": {
                "handler": "src/handlers/task/updateTask.updateTask",
                "events": [
                  {
                    "http": {
                      "path": "tasks/{taskId}",
                      "method": "put",
                      "cors": {
                        "origin": "http://localhost:5173",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "allowCredentials": "<REDACTED>",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-updateTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE"
              },
              "deleteTask": {
                "handler": "src/handlers/task/deleteTask.deleteTask",
                "events": [
                  {
                    "http": {
                      "path": "tasks/{taskId}",
                      "method": "delete",
                      "cors": {
                        "origin": "http://localhost:5173",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "allowCredentials": "<REDACTED>",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-deleteTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg"
              },
              "manageTimer": {
                "handler": "src/handlers/timer/manageTimer.manageTimer",
                "events": [
                  {
                    "http": {
                      "path": "timer",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-manageTimer",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw"
              },
              "updatePreferences": {
                "handler": "src/handlers/preferences/updatePreferences.updatePreferences",
                "events": [
                  {
                    "http": {
                      "path": "preferences",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-updatePreferences",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ"
              },
              "getMusic": {
                "handler": "src/handlers/music/getMusic.getMusic",
                "events": [
                  {
                    "http": {
                      "path": "music",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-getMusic",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU"
              },
              "updateBackground": {
                "handler": "src/handlers/background/updateBackground.updateBackground",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-updateBackground",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs"
              },
              "initializeBackgrounds": {
                "handler": "src/handlers/backgrounds.initializeBackgrounds",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}/initialize",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-initializeBackgrounds",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw"
              },
              "getBackgrounds": {
                "handler": "src/handlers/backgrounds.getBackgrounds",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-getBackgrounds",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg"
              },
              "addBackground": {
                "handler": "src/handlers/backgrounds.addBackground",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-addBackground",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw"
              },
              "deleteBackground": {
                "handler": "src/handlers/backgrounds.deleteBackground",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}",
                      "method": "delete",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-deleteBackground",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc"
              },
              "auth0Authorizer": {
                "handler": "src/handlers/auth/index.handler",
                "events": [
                  {
                    "http": {
                      "path": "auth/validate",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-auth0Authorizer",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg"
              }
            }
          },
          "configFileDirPath": "D:\\Projects\\Portfolio_Projects\\focusflow\\FocusFlow\\backend",
          "config": {
            "type": "self"
          },
          "options": {},
          "stage": "dev",
          "dashboard": {
            "aws": {
              "accessKeyId": "<REDACTED>",
              "secretAccessKey": "<REDACTED>",
              "sessionToken": "<REDACTED>",
              "$source": {
                "CREDENTIALS_CODE": "<REDACTED>"
              }
            },
            "params": null,
            "accessKey": "<REDACTED>"
          },
          "logger": {
            "namespace": "s:core:resolver:self",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      },
      "aws": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "devquesting",
            "app": "focusflow",
            "service": "backend",
            "plugins": [
              "serverless-offline"
            ],
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "region": "us-east-1",
              "stage": "dev",
              "environment": {
                "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                "AUTH0_AUDIENCE": "focusflow-audience",
                "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                "S3_ASSETS_BUCKET": "dev-focusflow-assets"
              },
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem",
                        "dynamodb:Scan",
                        "dynamodb:Query"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:DeleteObject"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "lambda:InvokeFunction"
                      ],
                      "Resource": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-auth0Authenticator"
                    }
                  ]
                }
              },
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "CreateTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-createTask"
                    }
                  },
                  "GetTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-getTask"
                    }
                  },
                  "UpdateTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-updateTask"
                    }
                  },
                  "DeleteTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-deleteTask"
                    }
                  },
                  "ManageTimerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-manageTimer"
                    }
                  },
                  "UpdatePreferencesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-updatePreferences"
                    }
                  },
                  "GetMusicLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-getMusic"
                    }
                  },
                  "UpdateBackgroundLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-updateBackground"
                    }
                  },
                  "InitializeBackgroundsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-initializeBackgrounds"
                    }
                  },
                  "GetBackgroundsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-getBackgrounds"
                    }
                  },
                  "AddBackgroundLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-addBackground"
                    }
                  },
                  "DeleteBackgroundLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-deleteBackground"
                    }
                  },
                  "Auth0AuthorizerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-auth0Authorizer"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "backend",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:UpdateItem",
                                  "dynamodb:DeleteItem",
                                  "dynamodb:Scan",
                                  "dynamodb:Query"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:PutObject",
                                  "s3:GetObject",
                                  "s3:DeleteObject"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "lambda:InvokeFunction"
                                ],
                                "Resource": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-auth0Authenticator"
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "backend",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/createTask.createTask",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-createTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateTaskLogGroup"
                    ]
                  },
                  "GetTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/getTask.getTasks",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-getTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetTaskLogGroup"
                    ]
                  },
                  "UpdateTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/updateTask.updateTask",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-updateTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateTaskLogGroup"
                    ]
                  },
                  "DeleteTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/deleteTask.deleteTask",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-deleteTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteTaskLogGroup"
                    ]
                  },
                  "ManageTimerLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/timer/manageTimer.manageTimer",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-manageTimer",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ManageTimerLogGroup"
                    ]
                  },
                  "UpdatePreferencesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/preferences/updatePreferences.updatePreferences",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-updatePreferences",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdatePreferencesLogGroup"
                    ]
                  },
                  "GetMusicLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/music/getMusic.getMusic",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-getMusic",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetMusicLogGroup"
                    ]
                  },
                  "UpdateBackgroundLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/background/updateBackground.updateBackground",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-updateBackground",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateBackgroundLogGroup"
                    ]
                  },
                  "InitializeBackgroundsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.initializeBackgrounds",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-initializeBackgrounds",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "InitializeBackgroundsLogGroup"
                    ]
                  },
                  "GetBackgroundsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.getBackgrounds",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-getBackgrounds",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetBackgroundsLogGroup"
                    ]
                  },
                  "AddBackgroundLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.addBackground",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-addBackground",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddBackgroundLogGroup"
                    ]
                  },
                  "DeleteBackgroundLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.deleteBackground",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-deleteBackground",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteBackgroundLogGroup"
                    ]
                  },
                  "Auth0AuthorizerLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/auth/index.handler",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-auth0Authorizer",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "Auth0AuthorizerLogGroup"
                    ]
                  },
                  "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ManageTimerLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdatePreferencesLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetMusicLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateBackgroundLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "InitializeBackgroundsLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetBackgroundsLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddBackgroundLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteBackgroundLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "Auth0AuthorizerLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceTasks": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "tasks",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceTasksTaskidVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "PathPart": "{taskId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceTimer": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "timer",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePreferences": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "preferences",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMusic": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "music",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBackgrounds": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "backgrounds",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBackgroundsUseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceBackgrounds"
                      },
                      "PathPart": "{userId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBackgroundsUseridVarInitialize": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "PathPart": "initialize",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuth": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "auth",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuthValidate": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceAuth"
                      },
                      "PathPart": "validate",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTasksOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true,
                            "method.response.header.Access-Control-Allow-Credentials": "<REDACTED>"
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id,X-Requested-With'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'",
                              "method.response.header.Access-Control-Allow-Credentials": "<REDACTED>"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTasksTaskidVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasksTaskidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTimerOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTimer"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPreferencesOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePreferences"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMusicOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMusic"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodBackgroundsOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgrounds"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodAuthValidateOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthValidate"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTasksPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTasksGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTasksTaskidVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasksTaskidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTasksTaskidVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasksTaskidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTimerPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTimer"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ManageTimerLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodPreferencesPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePreferences"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdatePreferencesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodMusicGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMusic"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetMusicLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetMusicLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgrounds"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateBackgroundLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarInitializePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVarInitialize"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "InitializeBackgroundsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "InitializeBackgroundsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetBackgroundsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetBackgroundsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddBackgroundLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AddBackgroundLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteBackgroundLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteBackgroundLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodAuthValidatePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthValidate"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "Auth0AuthorizerLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerLambdaPermissionApiGateway"
                    ]
                  },
                  "Auth0AuthorizerApiGatewayAuthorizer": {
                    "Type": "AWS::ApiGateway::Authorizer",
                    "Properties": {
                      "AuthorizerResultTtlInSeconds": 300,
                      "IdentitySource": "method.request.header.Authorization",
                      "Name": "auth0Authorizer",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "AuthorizerUri": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                              "Fn::GetAtt": [
                                "Auth0AuthorizerLambdaFunction",
                                "Arn"
                              ]
                            },
                            "/invocations"
                          ]
                        ]
                      },
                      "Type": "REQUEST"
                    }
                  },
                  "ApiGatewayDeployment1732598895104": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodTasksOptions",
                      "ApiGatewayMethodTasksTaskidVarOptions",
                      "ApiGatewayMethodTimerOptions",
                      "ApiGatewayMethodPreferencesOptions",
                      "ApiGatewayMethodMusicOptions",
                      "ApiGatewayMethodBackgroundsOptions",
                      "ApiGatewayMethodAuthValidateOptions",
                      "ApiGatewayMethodTasksPost",
                      "ApiGatewayMethodTasksGet",
                      "ApiGatewayMethodTasksTaskidVarPut",
                      "ApiGatewayMethodTasksTaskidVarDelete",
                      "ApiGatewayMethodTimerPost",
                      "ApiGatewayMethodPreferencesPut",
                      "ApiGatewayMethodMusicGet",
                      "ApiGatewayMethodBackgroundsPut",
                      "ApiGatewayMethodBackgroundsUseridVarInitializePost",
                      "ApiGatewayMethodBackgroundsUseridVarGet",
                      "ApiGatewayMethodBackgroundsUseridVarPost",
                      "ApiGatewayMethodBackgroundsUseridVarDelete",
                      "ApiGatewayMethodAuthValidatePost"
                    ]
                  },
                  "CreateTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "Auth0AuthorizerLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "Auth0AuthorizerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ManageTimerLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ManageTimerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdatePreferencesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdatePreferencesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetMusicLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetMusicLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateBackgroundLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "InitializeBackgroundsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "InitializeBackgroundsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetBackgroundsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetBackgroundsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "AddBackgroundLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteBackgroundLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "TasksTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "dev-focusflow-tasks",
                      "BillingMode": "PAY_PER_REQUEST",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "taskId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        },
                        {
                          "AttributeName": "taskId",
                          "KeyType": "RANGE"
                        }
                      ]
                    }
                  },
                  "UsersTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "dev-focusflow-users",
                      "BillingMode": "PAY_PER_REQUEST",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        }
                      ]
                    }
                  },
                  "UserBackgroundsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "dev-user-backgrounds",
                      "BillingMode": "PAY_PER_REQUEST",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        }
                      ]
                    }
                  },
                  "AssetsBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketName": "dev-focusflow-assets-274552760074",
                      "CorsConfiguration": {
                        "CorsRules": [
                          {
                            "AllowedHeaders": [
                              "*"
                            ],
                            "AllowedMethods": [
                              "GET",
                              "PUT",
                              "POST",
                              "DELETE",
                              "HEAD"
                            ],
                            "AllowedOrigins": [
                              "*"
                            ],
                            "MaxAge": 3000
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                    "Export": {
                      "Name": "sls-backend-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "CreateTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-CreateTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-GetTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-UpdateTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-DeleteTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "ManageTimerLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-ManageTimerLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdatePreferencesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-UpdatePreferencesLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetMusicLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-GetMusicLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateBackgroundLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-UpdateBackgroundLambdaFunctionQualifiedArn"
                    }
                  },
                  "InitializeBackgroundsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-InitializeBackgroundsLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetBackgroundsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-GetBackgroundsLambdaFunctionQualifiedArn"
                    }
                  },
                  "AddBackgroundLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-AddBackgroundLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteBackgroundLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-DeleteBackgroundLambdaFunctionQualifiedArn"
                    }
                  },
                  "Auth0AuthorizerLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-Auth0AuthorizerLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-backend-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "custom": {
              "tableName": "dev-focusflow-tasks",
              "usersTableName": "dev-focusflow-users",
              "bucketName": "dev-focusflow-assets-274552760074"
            },
            "resources": {
              "Resources": {
                "TasksTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "dev-focusflow-tasks",
                    "BillingMode": "PAY_PER_REQUEST",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "taskId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "taskId",
                        "KeyType": "RANGE"
                      }
                    ]
                  }
                },
                "UsersTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "dev-focusflow-users",
                    "BillingMode": "PAY_PER_REQUEST",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ]
                  }
                },
                "UserBackgroundsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "dev-user-backgrounds",
                    "BillingMode": "PAY_PER_REQUEST",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ]
                  }
                },
                "AssetsBucket": {
                  "Type": "AWS::S3::Bucket",
                  "Properties": {
                    "BucketName": "dev-focusflow-assets-274552760074",
                    "CorsConfiguration": {
                      "CorsRules": [
                        {
                          "AllowedHeaders": [
                            "*"
                          ],
                          "AllowedMethods": [
                            "GET",
                            "PUT",
                            "POST",
                            "DELETE",
                            "HEAD"
                          ],
                          "AllowedOrigins": [
                            "*"
                          ],
                          "MaxAge": 3000
                        }
                      ]
                    }
                  }
                }
              },
              "Outputs": {}
            },
            "functions": {
              "createTask": {
                "handler": "src/handlers/task/createTask.createTask",
                "events": [
                  {
                    "http": {
                      "path": "tasks",
                      "method": "post",
                      "cors": {
                        "origin": "http://localhost:5173",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-createTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM"
              },
              "getTask": {
                "handler": "src/handlers/task/getTask.getTasks",
                "events": [
                  {
                    "http": {
                      "path": "tasks",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-getTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M"
              },
              "updateTask": {
                "handler": "src/handlers/task/updateTask.updateTask",
                "events": [
                  {
                    "http": {
                      "path": "tasks/{taskId}",
                      "method": "put",
                      "cors": {
                        "origin": "http://localhost:5173",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "allowCredentials": "<REDACTED>",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-updateTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE"
              },
              "deleteTask": {
                "handler": "src/handlers/task/deleteTask.deleteTask",
                "events": [
                  {
                    "http": {
                      "path": "tasks/{taskId}",
                      "method": "delete",
                      "cors": {
                        "origin": "http://localhost:5173",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "allowCredentials": "<REDACTED>",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-deleteTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg"
              },
              "manageTimer": {
                "handler": "src/handlers/timer/manageTimer.manageTimer",
                "events": [
                  {
                    "http": {
                      "path": "timer",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-manageTimer",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw"
              },
              "updatePreferences": {
                "handler": "src/handlers/preferences/updatePreferences.updatePreferences",
                "events": [
                  {
                    "http": {
                      "path": "preferences",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-updatePreferences",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ"
              },
              "getMusic": {
                "handler": "src/handlers/music/getMusic.getMusic",
                "events": [
                  {
                    "http": {
                      "path": "music",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-getMusic",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU"
              },
              "updateBackground": {
                "handler": "src/handlers/background/updateBackground.updateBackground",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-updateBackground",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs"
              },
              "initializeBackgrounds": {
                "handler": "src/handlers/backgrounds.initializeBackgrounds",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}/initialize",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-initializeBackgrounds",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw"
              },
              "getBackgrounds": {
                "handler": "src/handlers/backgrounds.getBackgrounds",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-getBackgrounds",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg"
              },
              "addBackground": {
                "handler": "src/handlers/backgrounds.addBackground",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-addBackground",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw"
              },
              "deleteBackground": {
                "handler": "src/handlers/backgrounds.deleteBackground",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}",
                      "method": "delete",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-deleteBackground",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc"
              },
              "auth0Authorizer": {
                "handler": "src/handlers/auth/index.handler",
                "events": [
                  {
                    "http": {
                      "path": "auth/validate",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-auth0Authorizer",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg"
              }
            }
          },
          "configFileDirPath": "D:\\Projects\\Portfolio_Projects\\focusflow\\FocusFlow\\backend",
          "config": {
            "type": "aws"
          },
          "options": {},
          "stage": "dev",
          "dashboard": {
            "aws": {
              "accessKeyId": "<REDACTED>",
              "secretAccessKey": "<REDACTED>",
              "sessionToken": "<REDACTED>",
              "$source": {
                "CREDENTIALS_CODE": "<REDACTED>"
              }
            },
            "params": null,
            "accessKey": "<REDACTED>"
          },
          "logger": {
            "namespace": "s:core:resolver:aws",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>",
          "isDefaultConfig": true
        },
        "resolvers": {}
      },
      "sls": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "devquesting",
            "app": "focusflow",
            "service": "backend",
            "plugins": [
              "serverless-offline"
            ],
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "region": "us-east-1",
              "stage": "dev",
              "environment": {
                "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                "AUTH0_AUDIENCE": "focusflow-audience",
                "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                "S3_ASSETS_BUCKET": "dev-focusflow-assets"
              },
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem",
                        "dynamodb:Scan",
                        "dynamodb:Query"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:PutObject",
                        "s3:GetObject",
                        "s3:DeleteObject"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "lambda:InvokeFunction"
                      ],
                      "Resource": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-auth0Authenticator"
                    }
                  ]
                }
              },
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "CreateTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-createTask"
                    }
                  },
                  "GetTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-getTask"
                    }
                  },
                  "UpdateTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-updateTask"
                    }
                  },
                  "DeleteTaskLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-deleteTask"
                    }
                  },
                  "ManageTimerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-manageTimer"
                    }
                  },
                  "UpdatePreferencesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-updatePreferences"
                    }
                  },
                  "GetMusicLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-getMusic"
                    }
                  },
                  "UpdateBackgroundLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-updateBackground"
                    }
                  },
                  "InitializeBackgroundsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-initializeBackgrounds"
                    }
                  },
                  "GetBackgroundsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-getBackgrounds"
                    }
                  },
                  "AddBackgroundLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-addBackground"
                    }
                  },
                  "DeleteBackgroundLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-deleteBackground"
                    }
                  },
                  "Auth0AuthorizerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-dev-auth0Authorizer"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "backend",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:UpdateItem",
                                  "dynamodb:DeleteItem",
                                  "dynamodb:Scan",
                                  "dynamodb:Query"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:PutObject",
                                  "s3:GetObject",
                                  "s3:DeleteObject"
                                ],
                                "Resource": "*"
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "lambda:InvokeFunction"
                                ],
                                "Resource": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-auth0Authenticator"
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "backend",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/createTask.createTask",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-createTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateTaskLogGroup"
                    ]
                  },
                  "GetTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/getTask.getTasks",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-getTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetTaskLogGroup"
                    ]
                  },
                  "UpdateTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/updateTask.updateTask",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-updateTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateTaskLogGroup"
                    ]
                  },
                  "DeleteTaskLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/task/deleteTask.deleteTask",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-deleteTask",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteTaskLogGroup"
                    ]
                  },
                  "ManageTimerLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/timer/manageTimer.manageTimer",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-manageTimer",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ManageTimerLogGroup"
                    ]
                  },
                  "UpdatePreferencesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/preferences/updatePreferences.updatePreferences",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-updatePreferences",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdatePreferencesLogGroup"
                    ]
                  },
                  "GetMusicLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/music/getMusic.getMusic",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-getMusic",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetMusicLogGroup"
                    ]
                  },
                  "UpdateBackgroundLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/background/updateBackground.updateBackground",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-updateBackground",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateBackgroundLogGroup"
                    ]
                  },
                  "InitializeBackgroundsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.initializeBackgrounds",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-initializeBackgrounds",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "InitializeBackgroundsLogGroup"
                    ]
                  },
                  "GetBackgroundsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.getBackgrounds",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-getBackgrounds",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetBackgroundsLogGroup"
                    ]
                  },
                  "AddBackgroundLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.addBackground",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-addBackground",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddBackgroundLogGroup"
                    ]
                  },
                  "DeleteBackgroundLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/backgrounds.deleteBackground",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-deleteBackground",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteBackgroundLogGroup"
                    ]
                  },
                  "Auth0AuthorizerLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                        "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                      },
                      "Handler": "src/handlers/auth/index.handler",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-dev-auth0Authorizer",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                          "AUTH0_AUDIENCE": "focusflow-audience",
                          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "Auth0AuthorizerLogGroup"
                    ]
                  },
                  "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteTaskLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ManageTimerLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdatePreferencesLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetMusicLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateBackgroundLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "InitializeBackgroundsLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetBackgroundsLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddBackgroundLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteBackgroundLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "Auth0AuthorizerLambdaFunction"
                      },
                      "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceTasks": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "tasks",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceTasksTaskidVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "PathPart": "{taskId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceTimer": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "timer",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourcePreferences": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "preferences",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMusic": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "music",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBackgrounds": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "backgrounds",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBackgroundsUseridVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceBackgrounds"
                      },
                      "PathPart": "{userId}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceBackgroundsUseridVarInitialize": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "PathPart": "initialize",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuth": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "auth",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuthValidate": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceAuth"
                      },
                      "PathPart": "validate",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTasksOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true,
                            "method.response.header.Access-Control-Allow-Credentials": "<REDACTED>"
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id,X-Requested-With'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'",
                              "method.response.header.Access-Control-Allow-Credentials": "<REDACTED>"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTasksTaskidVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasksTaskidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTimerOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTimer"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodPreferencesOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePreferences"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMusicOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMusic"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodBackgroundsOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgrounds"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodAuthValidateOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthValidate"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodTasksPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTasksGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasks"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTasksTaskidVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasksTaskidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTasksTaskidVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTasksTaskidVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteTaskLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodTimerPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceTimer"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ManageTimerLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodPreferencesPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourcePreferences"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdatePreferencesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodMusicGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMusic"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetMusicLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetMusicLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgrounds"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "CUSTOM",
                      "AuthorizerId": {
                        "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                      },
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateBackgroundLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerApiGatewayAuthorizer"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarInitializePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVarInitialize"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "InitializeBackgroundsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "InitializeBackgroundsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetBackgroundsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetBackgroundsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AddBackgroundLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AddBackgroundLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodBackgroundsUseridVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteBackgroundLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteBackgroundLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodAuthValidatePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthValidate"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "Auth0AuthorizerLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "Auth0AuthorizerLambdaPermissionApiGateway"
                    ]
                  },
                  "Auth0AuthorizerApiGatewayAuthorizer": {
                    "Type": "AWS::ApiGateway::Authorizer",
                    "Properties": {
                      "AuthorizerResultTtlInSeconds": 300,
                      "IdentitySource": "method.request.header.Authorization",
                      "Name": "auth0Authorizer",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "AuthorizerUri": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                              "Fn::GetAtt": [
                                "Auth0AuthorizerLambdaFunction",
                                "Arn"
                              ]
                            },
                            "/invocations"
                          ]
                        ]
                      },
                      "Type": "REQUEST"
                    }
                  },
                  "ApiGatewayDeployment1732598895104": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodTasksOptions",
                      "ApiGatewayMethodTasksTaskidVarOptions",
                      "ApiGatewayMethodTimerOptions",
                      "ApiGatewayMethodPreferencesOptions",
                      "ApiGatewayMethodMusicOptions",
                      "ApiGatewayMethodBackgroundsOptions",
                      "ApiGatewayMethodAuthValidateOptions",
                      "ApiGatewayMethodTasksPost",
                      "ApiGatewayMethodTasksGet",
                      "ApiGatewayMethodTasksTaskidVarPut",
                      "ApiGatewayMethodTasksTaskidVarDelete",
                      "ApiGatewayMethodTimerPost",
                      "ApiGatewayMethodPreferencesPut",
                      "ApiGatewayMethodMusicGet",
                      "ApiGatewayMethodBackgroundsPut",
                      "ApiGatewayMethodBackgroundsUseridVarInitializePost",
                      "ApiGatewayMethodBackgroundsUseridVarGet",
                      "ApiGatewayMethodBackgroundsUseridVarPost",
                      "ApiGatewayMethodBackgroundsUseridVarDelete",
                      "ApiGatewayMethodAuthValidatePost"
                    ]
                  },
                  "CreateTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "Auth0AuthorizerLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "Auth0AuthorizerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteTaskLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteTaskLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ManageTimerLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ManageTimerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdatePreferencesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdatePreferencesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetMusicLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetMusicLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateBackgroundLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "InitializeBackgroundsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "InitializeBackgroundsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetBackgroundsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetBackgroundsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "AddBackgroundLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteBackgroundLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteBackgroundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "TasksTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "dev-focusflow-tasks",
                      "BillingMode": "PAY_PER_REQUEST",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "taskId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        },
                        {
                          "AttributeName": "taskId",
                          "KeyType": "RANGE"
                        }
                      ]
                    }
                  },
                  "UsersTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "dev-focusflow-users",
                      "BillingMode": "PAY_PER_REQUEST",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        }
                      ]
                    }
                  },
                  "UserBackgroundsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "dev-user-backgrounds",
                      "BillingMode": "PAY_PER_REQUEST",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        }
                      ]
                    }
                  },
                  "AssetsBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketName": "dev-focusflow-assets-274552760074",
                      "CorsConfiguration": {
                        "CorsRules": [
                          {
                            "AllowedHeaders": [
                              "*"
                            ],
                            "AllowedMethods": [
                              "GET",
                              "PUT",
                              "POST",
                              "DELETE",
                              "HEAD"
                            ],
                            "AllowedOrigins": [
                              "*"
                            ],
                            "MaxAge": 3000
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                    "Export": {
                      "Name": "sls-backend-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "CreateTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-CreateTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-GetTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-UpdateTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteTaskLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-DeleteTaskLambdaFunctionQualifiedArn"
                    }
                  },
                  "ManageTimerLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-ManageTimerLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdatePreferencesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-UpdatePreferencesLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetMusicLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-GetMusicLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateBackgroundLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-UpdateBackgroundLambdaFunctionQualifiedArn"
                    }
                  },
                  "InitializeBackgroundsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-InitializeBackgroundsLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetBackgroundsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-GetBackgroundsLambdaFunctionQualifiedArn"
                    }
                  },
                  "AddBackgroundLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-AddBackgroundLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteBackgroundLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-DeleteBackgroundLambdaFunctionQualifiedArn"
                    }
                  },
                  "Auth0AuthorizerLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg"
                    },
                    "Export": {
                      "Name": "sls-backend-dev-Auth0AuthorizerLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-backend-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "custom": {
              "tableName": "dev-focusflow-tasks",
              "usersTableName": "dev-focusflow-users",
              "bucketName": "dev-focusflow-assets-274552760074"
            },
            "resources": {
              "Resources": {
                "TasksTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "dev-focusflow-tasks",
                    "BillingMode": "PAY_PER_REQUEST",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "taskId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "taskId",
                        "KeyType": "RANGE"
                      }
                    ]
                  }
                },
                "UsersTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "dev-focusflow-users",
                    "BillingMode": "PAY_PER_REQUEST",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ]
                  }
                },
                "UserBackgroundsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "dev-user-backgrounds",
                    "BillingMode": "PAY_PER_REQUEST",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ]
                  }
                },
                "AssetsBucket": {
                  "Type": "AWS::S3::Bucket",
                  "Properties": {
                    "BucketName": "dev-focusflow-assets-274552760074",
                    "CorsConfiguration": {
                      "CorsRules": [
                        {
                          "AllowedHeaders": [
                            "*"
                          ],
                          "AllowedMethods": [
                            "GET",
                            "PUT",
                            "POST",
                            "DELETE",
                            "HEAD"
                          ],
                          "AllowedOrigins": [
                            "*"
                          ],
                          "MaxAge": 3000
                        }
                      ]
                    }
                  }
                }
              },
              "Outputs": {}
            },
            "functions": {
              "createTask": {
                "handler": "src/handlers/task/createTask.createTask",
                "events": [
                  {
                    "http": {
                      "path": "tasks",
                      "method": "post",
                      "cors": {
                        "origin": "http://localhost:5173",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-createTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM"
              },
              "getTask": {
                "handler": "src/handlers/task/getTask.getTasks",
                "events": [
                  {
                    "http": {
                      "path": "tasks",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-getTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M"
              },
              "updateTask": {
                "handler": "src/handlers/task/updateTask.updateTask",
                "events": [
                  {
                    "http": {
                      "path": "tasks/{taskId}",
                      "method": "put",
                      "cors": {
                        "origin": "http://localhost:5173",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "allowCredentials": "<REDACTED>",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-updateTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE"
              },
              "deleteTask": {
                "handler": "src/handlers/task/deleteTask.deleteTask",
                "events": [
                  {
                    "http": {
                      "path": "tasks/{taskId}",
                      "method": "delete",
                      "cors": {
                        "origin": "http://localhost:5173",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "allowCredentials": "<REDACTED>",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-deleteTask",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg"
              },
              "manageTimer": {
                "handler": "src/handlers/timer/manageTimer.manageTimer",
                "events": [
                  {
                    "http": {
                      "path": "timer",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-manageTimer",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw"
              },
              "updatePreferences": {
                "handler": "src/handlers/preferences/updatePreferences.updatePreferences",
                "events": [
                  {
                    "http": {
                      "path": "preferences",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-updatePreferences",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ"
              },
              "getMusic": {
                "handler": "src/handlers/music/getMusic.getMusic",
                "events": [
                  {
                    "http": {
                      "path": "music",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-getMusic",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU"
              },
              "updateBackground": {
                "handler": "src/handlers/background/updateBackground.updateBackground",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "Authorization",
                          "X-Requested-With",
                          "X-Amz-Date",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "authorizer": {
                        "type": "REQUEST",
                        "name": "auth0Authorizer",
                        "arn": {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "managedExternally": false,
                        "resultTtlInSeconds": 300,
                        "identitySource": "method.request.header.Authorization",
                        "claims": []
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-updateBackground",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs"
              },
              "initializeBackgrounds": {
                "handler": "src/handlers/backgrounds.initializeBackgrounds",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}/initialize",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-initializeBackgrounds",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw"
              },
              "getBackgrounds": {
                "handler": "src/handlers/backgrounds.getBackgrounds",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-getBackgrounds",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg"
              },
              "addBackground": {
                "handler": "src/handlers/backgrounds.addBackground",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-addBackground",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw"
              },
              "deleteBackground": {
                "handler": "src/handlers/backgrounds.deleteBackground",
                "events": [
                  {
                    "http": {
                      "path": "backgrounds/{userId}",
                      "method": "delete",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-deleteBackground",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc"
              },
              "auth0Authorizer": {
                "handler": "src/handlers/auth/index.handler",
                "events": [
                  {
                    "http": {
                      "path": "auth/validate",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "backend-dev-auth0Authorizer",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg"
              }
            }
          },
          "configFileDirPath": "D:\\Projects\\Portfolio_Projects\\focusflow\\FocusFlow\\backend",
          "config": {
            "type": "sls"
          },
          "options": {},
          "stage": "dev",
          "dashboard": {
            "aws": {
              "accessKeyId": "<REDACTED>",
              "secretAccessKey": "<REDACTED>",
              "sessionToken": "<REDACTED>",
              "$source": {
                "CREDENTIALS_CODE": "<REDACTED>"
              }
            },
            "params": null,
            "accessKey": "<REDACTED>"
          },
          "logger": {
            "namespace": "s:core:resolver:sls",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "D:\\Projects\\Portfolio_Projects\\focusflow\\FocusFlow\\backend",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "devquesting",
      "app": "focusflow",
      "service": "backend",
      "plugins": [
        "serverless-offline"
      ],
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "stage": "dev",
        "environment": {
          "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
          "AUTH0_AUDIENCE": "focusflow-audience",
          "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
          "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
          "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
          "S3_ASSETS_BUCKET": "dev-focusflow-assets"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:Scan",
                  "dynamodb:Query"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:DeleteObject"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "lambda:InvokeFunction"
                ],
                "Resource": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-auth0Authenticator"
              }
            ]
          }
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "CreateTaskLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-createTask"
              }
            },
            "GetTaskLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-getTask"
              }
            },
            "UpdateTaskLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-updateTask"
              }
            },
            "DeleteTaskLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-deleteTask"
              }
            },
            "ManageTimerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-manageTimer"
              }
            },
            "UpdatePreferencesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-updatePreferences"
              }
            },
            "GetMusicLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-getMusic"
              }
            },
            "UpdateBackgroundLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-updateBackground"
              }
            },
            "InitializeBackgroundsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-initializeBackgrounds"
              }
            },
            "GetBackgroundsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-getBackgrounds"
              }
            },
            "AddBackgroundLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-addBackground"
              }
            },
            "DeleteBackgroundLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-deleteBackground"
              }
            },
            "Auth0AuthorizerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-dev-auth0Authorizer"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem",
                            "dynamodb:Scan",
                            "dynamodb:Query"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:PutObject",
                            "s3:GetObject",
                            "s3:DeleteObject"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "lambda:InvokeFunction"
                          ],
                          "Resource": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-auth0Authenticator"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "CreateTaskLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/task/createTask.createTask",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-createTask",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateTaskLogGroup"
              ]
            },
            "GetTaskLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/task/getTask.getTasks",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-getTask",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetTaskLogGroup"
              ]
            },
            "UpdateTaskLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/task/updateTask.updateTask",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-updateTask",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateTaskLogGroup"
              ]
            },
            "DeleteTaskLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/task/deleteTask.deleteTask",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-deleteTask",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteTaskLogGroup"
              ]
            },
            "ManageTimerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/timer/manageTimer.manageTimer",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-manageTimer",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ManageTimerLogGroup"
              ]
            },
            "UpdatePreferencesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/preferences/updatePreferences.updatePreferences",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-updatePreferences",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdatePreferencesLogGroup"
              ]
            },
            "GetMusicLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/music/getMusic.getMusic",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-getMusic",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetMusicLogGroup"
              ]
            },
            "UpdateBackgroundLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/background/updateBackground.updateBackground",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-updateBackground",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateBackgroundLogGroup"
              ]
            },
            "InitializeBackgroundsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/backgrounds.initializeBackgrounds",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-initializeBackgrounds",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "InitializeBackgroundsLogGroup"
              ]
            },
            "GetBackgroundsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/backgrounds.getBackgrounds",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-getBackgrounds",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetBackgroundsLogGroup"
              ]
            },
            "AddBackgroundLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/backgrounds.addBackground",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-addBackground",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AddBackgroundLogGroup"
              ]
            },
            "DeleteBackgroundLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/backgrounds.deleteBackground",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-deleteBackground",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteBackgroundLogGroup"
              ]
            },
            "Auth0AuthorizerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
                  "S3Key": "serverless/backend/dev/1732598908435-2024-11-26T05:28:28.435Z/backend.zip"
                },
                "Handler": "src/handlers/auth/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-dev-auth0Authorizer",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "AUTH0_DOMAIN": "dev-6zeb418i7xs8g1lc.us.auth0.com",
                    "AUTH0_AUDIENCE": "focusflow-audience",
                    "AUTH0_ISSUER": "https://dev-6zeb418i7xs8g1lc.us.auth0.com/",
                    "DYNAMODB_TASKS_TABLE": "dev-focusflow-tasks",
                    "DYNAMODB_USERS_TABLE": "dev-focusflow-users",
                    "S3_ASSETS_BUCKET": "dev-focusflow-assets"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "Auth0AuthorizerLogGroup"
              ]
            },
            "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateTaskLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetTaskLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateTaskLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteTaskLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ManageTimerLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdatePreferencesLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMusicLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateBackgroundLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "InitializeBackgroundsLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetBackgroundsLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AddBackgroundLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteBackgroundLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "Auth0AuthorizerLambdaFunction"
                },
                "CodeSha256": "NlY+S2DRHebo1Y0ejr395Jzcwbr9l3uILbwAhXcQ/uE="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-backend",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceTasks": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "tasks",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceTasksTaskidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceTasks"
                },
                "PathPart": "{taskId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceTimer": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "timer",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePreferences": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "preferences",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMusic": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "music",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBackgrounds": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "backgrounds",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBackgroundsUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBackgrounds"
                },
                "PathPart": "{userId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceBackgroundsUseridVarInitialize": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                },
                "PathPart": "initialize",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuth": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "auth",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthValidate": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuth"
                },
                "PathPart": "validate",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodTasksOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true,
                      "method.response.header.Access-Control-Allow-Credentials": "<REDACTED>"
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id,X-Requested-With'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'",
                        "method.response.header.Access-Control-Allow-Credentials": "<REDACTED>"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTasks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodTasksTaskidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTasksTaskidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodTimerOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTimer"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPreferencesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePreferences"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMusicOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMusic"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodBackgroundsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBackgrounds"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthValidateOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthValidate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodTasksPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTasks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateTaskLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "Auth0AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodTasksGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTasks"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetTaskLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "Auth0AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodTasksTaskidVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTasksTaskidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateTaskLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "Auth0AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodTasksTaskidVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTasksTaskidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteTaskLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "Auth0AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodTimerPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTimer"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ManageTimerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "Auth0AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodPreferencesPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePreferences"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdatePreferencesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "Auth0AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodMusicGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMusic"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetMusicLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetMusicLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodBackgroundsPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBackgrounds"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateBackgroundLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "Auth0AuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodBackgroundsUseridVarInitializePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBackgroundsUseridVarInitialize"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "InitializeBackgroundsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "InitializeBackgroundsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodBackgroundsUseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetBackgroundsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetBackgroundsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodBackgroundsUseridVarPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AddBackgroundLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AddBackgroundLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodBackgroundsUseridVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceBackgroundsUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteBackgroundLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteBackgroundLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAuthValidatePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthValidate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "Auth0AuthorizerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "Auth0AuthorizerLambdaPermissionApiGateway"
              ]
            },
            "Auth0AuthorizerApiGatewayAuthorizer": {
              "Type": "AWS::ApiGateway::Authorizer",
              "Properties": {
                "AuthorizerResultTtlInSeconds": 300,
                "IdentitySource": "method.request.header.Authorization",
                "Name": "auth0Authorizer",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "AuthorizerUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "Auth0AuthorizerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "Type": "REQUEST"
              }
            },
            "ApiGatewayDeployment1732598895104": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodTasksOptions",
                "ApiGatewayMethodTasksTaskidVarOptions",
                "ApiGatewayMethodTimerOptions",
                "ApiGatewayMethodPreferencesOptions",
                "ApiGatewayMethodMusicOptions",
                "ApiGatewayMethodBackgroundsOptions",
                "ApiGatewayMethodAuthValidateOptions",
                "ApiGatewayMethodTasksPost",
                "ApiGatewayMethodTasksGet",
                "ApiGatewayMethodTasksTaskidVarPut",
                "ApiGatewayMethodTasksTaskidVarDelete",
                "ApiGatewayMethodTimerPost",
                "ApiGatewayMethodPreferencesPut",
                "ApiGatewayMethodMusicGet",
                "ApiGatewayMethodBackgroundsPut",
                "ApiGatewayMethodBackgroundsUseridVarInitializePost",
                "ApiGatewayMethodBackgroundsUseridVarGet",
                "ApiGatewayMethodBackgroundsUseridVarPost",
                "ApiGatewayMethodBackgroundsUseridVarDelete",
                "ApiGatewayMethodAuthValidatePost"
              ]
            },
            "CreateTaskLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "Auth0AuthorizerLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "Auth0AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetTaskLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateTaskLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteTaskLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteTaskLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ManageTimerLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ManageTimerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdatePreferencesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdatePreferencesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetMusicLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMusicLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateBackgroundLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateBackgroundLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "InitializeBackgroundsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "InitializeBackgroundsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetBackgroundsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetBackgroundsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AddBackgroundLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AddBackgroundLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteBackgroundLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteBackgroundLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "TasksTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "dev-focusflow-tasks",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "taskId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "taskId",
                    "KeyType": "RANGE"
                  }
                ]
              }
            },
            "UsersTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "dev-focusflow-users",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ]
              }
            },
            "UserBackgroundsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "dev-user-backgrounds",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ]
              }
            },
            "AssetsBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketName": "dev-focusflow-assets-274552760074",
                "CorsConfiguration": {
                  "CorsRules": [
                    {
                      "AllowedHeaders": [
                        "*"
                      ],
                      "AllowedMethods": [
                        "GET",
                        "PUT",
                        "POST",
                        "DELETE",
                        "HEAD"
                      ],
                      "AllowedOrigins": [
                        "*"
                      ],
                      "MaxAge": 3000
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
              "Export": {
                "Name": "sls-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateTaskLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM"
              },
              "Export": {
                "Name": "sls-backend-dev-CreateTaskLambdaFunctionQualifiedArn"
              }
            },
            "GetTaskLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M"
              },
              "Export": {
                "Name": "sls-backend-dev-GetTaskLambdaFunctionQualifiedArn"
              }
            },
            "UpdateTaskLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE"
              },
              "Export": {
                "Name": "sls-backend-dev-UpdateTaskLambdaFunctionQualifiedArn"
              }
            },
            "DeleteTaskLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg"
              },
              "Export": {
                "Name": "sls-backend-dev-DeleteTaskLambdaFunctionQualifiedArn"
              }
            },
            "ManageTimerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw"
              },
              "Export": {
                "Name": "sls-backend-dev-ManageTimerLambdaFunctionQualifiedArn"
              }
            },
            "UpdatePreferencesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ"
              },
              "Export": {
                "Name": "sls-backend-dev-UpdatePreferencesLambdaFunctionQualifiedArn"
              }
            },
            "GetMusicLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU"
              },
              "Export": {
                "Name": "sls-backend-dev-GetMusicLambdaFunctionQualifiedArn"
              }
            },
            "UpdateBackgroundLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs"
              },
              "Export": {
                "Name": "sls-backend-dev-UpdateBackgroundLambdaFunctionQualifiedArn"
              }
            },
            "InitializeBackgroundsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw"
              },
              "Export": {
                "Name": "sls-backend-dev-InitializeBackgroundsLambdaFunctionQualifiedArn"
              }
            },
            "GetBackgroundsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg"
              },
              "Export": {
                "Name": "sls-backend-dev-GetBackgroundsLambdaFunctionQualifiedArn"
              }
            },
            "AddBackgroundLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw"
              },
              "Export": {
                "Name": "sls-backend-dev-AddBackgroundLambdaFunctionQualifiedArn"
              }
            },
            "DeleteBackgroundLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc"
              },
              "Export": {
                "Name": "sls-backend-dev-DeleteBackgroundLambdaFunctionQualifiedArn"
              }
            },
            "Auth0AuthorizerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg"
              },
              "Export": {
                "Name": "sls-backend-dev-Auth0AuthorizerLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-backend-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "custom": {
        "tableName": "dev-focusflow-tasks",
        "usersTableName": "dev-focusflow-users",
        "bucketName": "dev-focusflow-assets-274552760074"
      },
      "resources": {
        "Resources": {
          "TasksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-focusflow-tasks",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "taskId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "taskId",
                  "KeyType": "RANGE"
                }
              ]
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-focusflow-users",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "UserBackgroundsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-user-backgrounds",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "AssetsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "dev-focusflow-assets-274552760074",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          }
        },
        "Outputs": {}
      },
      "functions": {
        "createTask": {
          "handler": "src/handlers/task/createTask.createTask",
          "events": [
            {
              "http": {
                "path": "tasks",
                "method": "post",
                "cors": {
                  "origin": "http://localhost:5173",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With",
                    "X-Amz-Date",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "REQUEST",
                  "name": "auth0Authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "Auth0AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-createTask",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateTaskLambdaVersionr31iKEaiHMFRxy2aZBdCT4aQ6iyyp6mgZqib90wJWM"
        },
        "getTask": {
          "handler": "src/handlers/task/getTask.getTasks",
          "events": [
            {
              "http": {
                "path": "tasks",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "REQUEST",
                  "name": "auth0Authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "Auth0AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-getTask",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetTaskLambdaVersion4NXsS0xIRDAAK02feRxKAow7h27Q3PYvYRqY4x2M"
        },
        "updateTask": {
          "handler": "src/handlers/task/updateTask.updateTask",
          "events": [
            {
              "http": {
                "path": "tasks/{taskId}",
                "method": "put",
                "cors": {
                  "origin": "http://localhost:5173",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With",
                    "X-Amz-Date",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "REQUEST",
                  "name": "auth0Authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "Auth0AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "allowCredentials": "<REDACTED>",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-updateTask",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateTaskLambdaVersionCPysptk9GVB6lyGbEYT2wJYoVwf6S47pClfrggVecoE"
        },
        "deleteTask": {
          "handler": "src/handlers/task/deleteTask.deleteTask",
          "events": [
            {
              "http": {
                "path": "tasks/{taskId}",
                "method": "delete",
                "cors": {
                  "origin": "http://localhost:5173",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With",
                    "X-Amz-Date",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "REQUEST",
                  "name": "auth0Authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "Auth0AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "allowCredentials": "<REDACTED>",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-deleteTask",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteTaskLambdaVersionqp8ay4pJexWW1J750A2NF9KhOFRuR5n9yHhaNlFg"
        },
        "manageTimer": {
          "handler": "src/handlers/timer/manageTimer.manageTimer",
          "events": [
            {
              "http": {
                "path": "timer",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With",
                    "X-Amz-Date",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "REQUEST",
                  "name": "auth0Authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "Auth0AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-manageTimer",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ManageTimerLambdaVersionaudkDhVaKirTQLLyZjtxXk9pgsrtsBqP8uazwsD9cw"
        },
        "updatePreferences": {
          "handler": "src/handlers/preferences/updatePreferences.updatePreferences",
          "events": [
            {
              "http": {
                "path": "preferences",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With",
                    "X-Amz-Date",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "REQUEST",
                  "name": "auth0Authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "Auth0AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-updatePreferences",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdatePreferencesLambdaVersioncsZYLEJeykO8hKRQN4hvlQsIh4kDgcB3IUZDBZKUeQ"
        },
        "getMusic": {
          "handler": "src/handlers/music/getMusic.getMusic",
          "events": [
            {
              "http": {
                "path": "music",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With",
                    "X-Amz-Date",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-getMusic",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetMusicLambdaVersionVqQygCeCuNnxHMJi0obwPvjTRZsP9REVNlvu2J5GbU"
        },
        "updateBackground": {
          "handler": "src/handlers/background/updateBackground.updateBackground",
          "events": [
            {
              "http": {
                "path": "backgrounds",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With",
                    "X-Amz-Date",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "REQUEST",
                  "name": "auth0Authorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "Auth0AuthorizerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-updateBackground",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateBackgroundLambdaVersionwAJqtAYT5eOKbrJ16s7y3CPFGOg6ihCeVrZNBlQVOvs"
        },
        "initializeBackgrounds": {
          "handler": "src/handlers/backgrounds.initializeBackgrounds",
          "events": [
            {
              "http": {
                "path": "backgrounds/{userId}/initialize",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-initializeBackgrounds",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "InitializeBackgroundsLambdaVersioneybuBOQ0Y2a9IR0UCCqtzQnBKvFEkwNkiS7gyksOVw"
        },
        "getBackgrounds": {
          "handler": "src/handlers/backgrounds.getBackgrounds",
          "events": [
            {
              "http": {
                "path": "backgrounds/{userId}",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-getBackgrounds",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetBackgroundsLambdaVersionsG9FtFDezYUqCDh2WbxEu5ihqy51hRo0xrBlbsjbg"
        },
        "addBackground": {
          "handler": "src/handlers/backgrounds.addBackground",
          "events": [
            {
              "http": {
                "path": "backgrounds/{userId}",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-addBackground",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AddBackgroundLambdaVersion7bMcoxxyiYWfqEoZskSOOslA15VB7QyIYijQjcw"
        },
        "deleteBackground": {
          "handler": "src/handlers/backgrounds.deleteBackground",
          "events": [
            {
              "http": {
                "path": "backgrounds/{userId}",
                "method": "delete",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-deleteBackground",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteBackgroundLambdaVersionPydyzcZVAmWjiBqywxozOxZD4isOsEo4t7B7Yfhgc"
        },
        "auth0Authorizer": {
          "handler": "src/handlers/auth/index.handler",
          "events": [
            {
              "http": {
                "path": "auth/validate",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "backend-dev-auth0Authorizer",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "Auth0AuthorizerLambdaVersionBlagLmGlZ2GbFc2cXNNOwELNxoi96aCcTSnVXGrvNg"
        }
      }
    },
    "serviceRawFile": "# FocusFlow Serverless Configuration\r\n\r\norg: devquesting\r\napp: focusflow\r\nservice: backend\r\n\r\nplugins:\r\n  - serverless-offline\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: us-east-1\r\n  stage: dev\r\n  environment:\r\n    AUTH0_DOMAIN: dev-6zeb418i7xs8g1lc.us.auth0.com\r\n    AUTH0_AUDIENCE: focusflow-audience\r\n    AUTH0_ISSUER: https://dev-6zeb418i7xs8g1lc.us.auth0.com/\r\n    DYNAMODB_TASKS_TABLE: dev-focusflow-tasks\r\n    DYNAMODB_USERS_TABLE: dev-focusflow-users\r\n    S3_ASSETS_BUCKET: dev-focusflow-assets \r\n  iam:\r\n    role:\r\n      statements:\r\n        - Effect: Allow\r\n          Action:\r\n            - dynamodb:PutItem\r\n            - dynamodb:GetItem\r\n            - dynamodb:UpdateItem\r\n            - dynamodb:DeleteItem\r\n            - dynamodb:Scan\r\n            - dynamodb:Query\r\n          Resource: \"*\"\r\n        - Effect: Allow\r\n          Action:\r\n            - s3:PutObject\r\n            - s3:GetObject\r\n            - s3:DeleteObject\r\n          Resource: \"*\"\r\n        - Effect: Allow\r\n          Action:\r\n            - lambda:InvokeFunction\r\n          Resource:\r\n            - arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-auth0Authenticator\r\n\r\ncustom:\r\n  tableName: ${sls:stage}-focusflow-tasks\r\n  usersTableName: ${sls:stage}-focusflow-users\r\n  bucketName: ${sls:stage}-focusflow-assets-${aws:accountId}\r\n\r\nresources:\r\n  Resources:\r\n    # DynamoDB Table for Tasks\r\n    TasksTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:custom.tableName}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: taskId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n          - AttributeName: taskId\r\n            KeyType: RANGE\r\n\r\n    # DynamoDB Table for Users\r\n    UsersTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:custom.usersTableName}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n\r\n    UserBackgroundsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: dev-user-backgrounds\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n\r\n    # S3 Bucket for Assets\r\n    AssetsBucket:\r\n      Type: AWS::S3::Bucket\r\n      Properties:\r\n        BucketName: ${self:custom.bucketName}\r\n        CorsConfiguration:\r\n          CorsRules:\r\n            - AllowedHeaders: [\"*\"]\r\n              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]\r\n              AllowedOrigins: [\"*\"]\r\n              MaxAge: 3000\r\n\r\nfunctions:\r\n  # Task Management\r\n  createTask:\r\n    handler: src/handlers/task/createTask.createTask\r\n    events:\r\n      - http:\r\n          path: tasks\r\n          method: post\r\n          cors:\r\n            origin: \"http://localhost:5173\"\r\n            allowCredentials: true\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n              - X-Requested-With\r\n              - X-Amz-Date\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n          authorizer:\r\n            type: REQUEST\r\n            identitySource: method.request.header.Authorization\r\n            name: auth0Authorizer\r\n  getTask:\r\n    handler: src/handlers/task/getTask.getTasks\r\n    events:\r\n      - http:\r\n          path: tasks\r\n          method: get\r\n          cors: true\r\n          authorizer:\r\n            type: REQUEST\r\n            identitySource: method.request.header.Authorization\r\n            name: auth0Authorizer\r\n  updateTask:\r\n    handler: src/handlers/task/updateTask.updateTask\r\n    events:\r\n      - http:\r\n          path: tasks/{taskId}\r\n          method: put\r\n          cors:\r\n            origin: \"http://localhost:5173\" # Use '*' for all origins or specify 'http://localhost:5173' for development\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n              - X-Requested-With\r\n              - X-Amz-Date\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n          authorizer:\r\n            type: REQUEST\r\n            identitySource: method.request.header.Authorization\r\n            name: auth0Authorizer\r\n          allowCredentials: true\r\n  deleteTask:\r\n    handler: src/handlers/task/deleteTask.deleteTask\r\n    events:\r\n      - http:\r\n          path: tasks/{taskId}\r\n          method: delete\r\n          cors:\r\n            origin: \"http://localhost:5173\" # Use '*' for all origins or specify 'http://localhost:5173' for development\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n              - X-Requested-With\r\n              - X-Amz-Date\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n          authorizer:\r\n            type: REQUEST\r\n            identitySource: method.request.header.Authorization\r\n            name: auth0Authorizer\r\n          allowCredentials: true\r\n  # Pomodoro Timer\r\n  manageTimer:\r\n    handler: src/handlers/timer/manageTimer.manageTimer\r\n    events:\r\n      - http:\r\n          path: timer\r\n          method: post\r\n          cors:\r\n            origin: \"*\" # Use '*' for all origins or specify 'http://localhost:5173' for development\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n              - X-Requested-With\r\n              - X-Amz-Date\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n          authorizer:\r\n            type: REQUEST\r\n            identitySource: method.request.header.Authorization\r\n            name: auth0Authorizer\r\n\r\n  # User Preferences\r\n  updatePreferences:\r\n    handler: src/handlers/preferences/updatePreferences.updatePreferences\r\n    events:\r\n      - http:\r\n          path: preferences\r\n          method: put\r\n          cors:\r\n            origin: \"*\" # Use '*' for all origins or specify 'http://localhost:5173' for development\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n              - X-Requested-With\r\n              - X-Amz-Date\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n          authorizer:\r\n            type: REQUEST\r\n            identitySource: method.request.header.Authorization\r\n            name: auth0Authorizer\r\n\r\n  # Music Player\r\n  getMusic:\r\n    handler: src/handlers/music/getMusic.getMusic\r\n    events:\r\n      - http:\r\n          path: music\r\n          method: get\r\n          cors:\r\n            origin: \"*\" # Use '*' for all origins or specify 'http://localhost:5173' for development\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n              - X-Requested-With\r\n              - X-Amz-Date\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n\r\n  # Background Management\r\n  updateBackground:\r\n    handler: src/handlers/background/updateBackground.updateBackground\r\n    events:\r\n      - http:\r\n          path: backgrounds\r\n          method: put\r\n          cors:\r\n            origin: \"*\" # Use '*' for all origins or specify 'http://localhost:5173' for development\r\n            headers:\r\n              - Content-Type\r\n              - Authorization\r\n              - X-Requested-With\r\n              - X-Amz-Date\r\n              - X-Api-Key\r\n              - X-Amz-Security-Token\r\n              - X-Amz-User-Agent\r\n          authorizer:\r\n            type: REQUEST\r\n            identitySource: method.request.header.Authorization\r\n            name: auth0Authorizer\r\n\r\n  initializeBackgrounds:\r\n    handler: src/handlers/backgrounds.initializeBackgrounds\r\n    events:\r\n      - http:\r\n          path: backgrounds/{userId}/initialize\r\n          method: post\r\n\r\n  getBackgrounds:\r\n    handler: src/handlers/backgrounds.getBackgrounds\r\n    events:\r\n      - http:\r\n          path: backgrounds/{userId}\r\n          method: get\r\n\r\n  addBackground:\r\n    handler: src/handlers/backgrounds.addBackground\r\n    events:\r\n      - http:\r\n          path: backgrounds/{userId}\r\n          method: post\r\n\r\n  deleteBackground:\r\n    handler: src/handlers/backgrounds.deleteBackground\r\n    events:\r\n      - http:\r\n          path: backgrounds/{userId}\r\n          method: delete\r\n\r\n  auth0Authorizer:\r\n    handler: src/handlers/auth/index.handler\r\n    events:\r\n      - http:\r\n          path: auth/validate\r\n          method: post\r\n          cors: true\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "6fcc864d3669b1e7a19c8b076386e97f",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "a00e51c8-04d8-4141-a358-fe9649ff9764",
    "orgName": "devquesting",
    "userId": "4g9dD64cGTjcqpfG9h",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": true,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "p5lvl4hDnczWh3Vp91",
      "serviceProvider": {
        "accessKeyId": "<REDACTED>",
        "secretAccessKey": "<REDACTED>",
        "sessionToken": "<REDACTED>",
        "$source": {
          "CREDENTIALS_CODE": "<REDACTED>"
        }
      },
      "instanceParameters": null
    },
    "userName": "devquesting",
    "subscription": null,
    "userEmail": "dev.dav.kup@gmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "274552760074",
    "projectType": "traditional",
    "versionSf": "4.4.12",
    "serviceProviderAwsCfStackName": "backend-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:274552760074:stack/backend-dev/80499180-a60f-11ef-b8d5-124d3fdcb0b3",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:274552760074:stack/backend-dev/80499180-a60f-11ef-b8d5-124d3fdcb0b3",
    "serviceProviderAwsCfStackCreated": "2024-11-19T00:44:57.988Z",
    "serviceProviderAwsCfStackUpdated": "2024-11-26T05:29:09.461Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ManageTimerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-manageTimer:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-ManageTimerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AddBackgroundLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-addBackground:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-AddBackgroundLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateTaskLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-updateTask:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-UpdateTaskLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdatePreferencesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-updatePreferences:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-UpdatePreferencesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateTaskLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-createTask:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-CreateTaskLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateBackgroundLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-updateBackground:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-UpdateBackgroundLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetTaskLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-getTask:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-GetTaskLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteBackgroundLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-deleteBackground:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-DeleteBackgroundLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "InitializeBackgroundsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-initializeBackgrounds:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-InitializeBackgroundsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-be0e5fd9-feac",
        "ExportName": "sls-backend-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "GetBackgroundsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-getBackgrounds:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-GetBackgroundsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteTaskLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-deleteTask:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-DeleteTaskLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMusicLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-getMusic:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-GetMusicLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "Auth0AuthorizerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:274552760074:function:backend-dev-auth0Authorizer:8",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-dev-Auth0AuthorizerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://b94obf2k3g.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-backend-dev-ServiceEndpoint"
      }
    ]
  }
}